1) create a basic webpack, react. react dom configuration setup.
2) created a twitter api account and got the api keys
3) cloned and installed snapkite and change the package.json
4) install all the related the filters pertaining to the the snapkite that helps in the type of filter we want. And configure it in the main snapkite-engines's package.json

run time code and build time code


src/files:
from-book.js has basics from book
main-stuff is incomplete
from-online is from an online tutorial
Dont-gie-up : I’ve learnt how to pass state, props, functions to other components. This is still not wrendering properly. i think the problem maybe in the way I’m mapping it?


notes about react:
*state is an event change from client side or server side.

*you can set state in events or simple functions
*states can be passed from one componet to another in props 
*you can pass functions from one component to another in the form of a props

* we are storing a function handleTermChange inside a props so that it can be passed on to another component as a prop.  

*if we need to pass one function from component to another then we need to store that in a component element like this --->
<SearchBar sefuk={this.anotherFunkyFunction} />
where sefuk is the prop name. anotherFunkyFunction is the function written within the same component. 

var App = React.createClass({
	anotherFunkyFunction: function(){
		
	}

	render:function(){
		<SearchBar sefuk={this.anotherFunkyFunction} />
	}
})

*if we have to pass a function from one component to another then it can be passed from parent to immediate child.

most global function are written in parent

var Child = React.createClass({
  hellofunction: function(){
  consoel.log(this.props.somefunk)

  }
});

var Parent = React.createClass({
  somefunction: function(event) {
    // event.component.props ?why is this not available?
  },
  render: function() {
    <Child somefunk={this.somefunction} />
  }
});

* we can pass function written in one parent component to another in child props like this: 
<AllStuff sefuk={this.anotherFunkyFunction}/> 
<SearchBar sefuk={this.anotherFunkyFunction} />

*the state can be changed by an event trigger. If you call the state just as it is then it will show the initial state in render. When you trigger an event then it will change the state.


var GifItem = function(props){

  checktosee: function(){
    console.log(this.props.gif.images.downsized.url)
  }

  return (
    <div> 
      <img src={props.gif.images.downsized.url} />
    </div>
  )
}






